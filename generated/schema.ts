// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ProtocolMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmCirculatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("sOhmCirculatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLocked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryRiskFreeValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryMIMRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryFORTMIMRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryMIMMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryFORTMIMMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryWAVAXMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("ownedLiquidity", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalLiquidity", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProtocolMetric entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProtocolMetric", id.toString(), this);
    }
  }

  static load(id: string): ProtocolMetric | null {
    return changetype<ProtocolMetric | null>(store.get("ProtocolMetric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmCirculatingSupply(): BigDecimal {
    let value = this.get("ohmCirculatingSupply");
    return value!.toBigDecimal();
  }

  set ohmCirculatingSupply(value: BigDecimal) {
    this.set("ohmCirculatingSupply", Value.fromBigDecimal(value));
  }

  get sOhmCirculatingSupply(): BigDecimal {
    let value = this.get("sOhmCirculatingSupply");
    return value!.toBigDecimal();
  }

  set sOhmCirculatingSupply(value: BigDecimal) {
    this.set("sOhmCirculatingSupply", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get ohmPrice(): BigDecimal {
    let value = this.get("ohmPrice");
    return value!.toBigDecimal();
  }

  set ohmPrice(value: BigDecimal) {
    this.set("ohmPrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get treasuryRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryRiskFreeValue(value: BigDecimal) {
    this.set("treasuryRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryMIMRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryMIMRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryMIMRiskFreeValue(value: BigDecimal) {
    this.set("treasuryMIMRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryFORTMIMRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryFORTMIMRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryFORTMIMRiskFreeValue(value: BigDecimal) {
    this.set("treasuryFORTMIMRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryMarketValue(): BigDecimal {
    let value = this.get("treasuryMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMarketValue(value: BigDecimal) {
    this.set("treasuryMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryMIMMarketValue(): BigDecimal {
    let value = this.get("treasuryMIMMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMIMMarketValue(value: BigDecimal) {
    this.set("treasuryMIMMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryFORTMIMMarketValue(): BigDecimal {
    let value = this.get("treasuryFORTMIMMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryFORTMIMMarketValue(value: BigDecimal) {
    this.set("treasuryFORTMIMMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryWAVAXMarketValue(): BigDecimal {
    let value = this.get("treasuryWAVAXMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryWAVAXMarketValue(value: BigDecimal) {
    this.set("treasuryWAVAXMarketValue", Value.fromBigDecimal(value));
  }

  get ownedLiquidity(): BigDecimal {
    let value = this.get("ownedLiquidity");
    return value!.toBigDecimal();
  }

  set ownedLiquidity(value: BigDecimal) {
    this.set("ownedLiquidity", Value.fromBigDecimal(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value!.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }
}
